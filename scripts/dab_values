#!/usr/bin/env python

import argparse
import os
import numpy as np
from endoanalysis.datasets import MasksDataset, parse_master_yaml
from endoanalysis.utils import calculate_dab_values


parser = argparse.ArgumentParser(description="This script calculates dab values for a given dataset with masks.")

parser.add_argument(
    "--master", type=str,  help="yml file with paths to lists of images and masks", required=True
)

parser.add_argument(
    "--bin_out", type=str, default="",  help="path to a binary file to store dab values. Should have .npy extention"
)

parser.add_argument(
    "--txt_out", type=str, default="", help="path to a text file to store dab values. Should have .txt extention"
)


args = parser.parse_args()
MASTER_PATH = args.master
BIN_PATH = args.bin_out
TXT_PATH = args.txt_out

if not (BIN_PATH or TXT_PATH) and BIN_PATH:
    raise Exception("At least of one of --bin_out, --txt_out arguments should be used")

if not BIN_PATH.endswith(".npy"):
    raise Exception("Output binary dab file should have .npy extention, but the filename is\n %s"%BIN_PATH)

if not TXT_PATH.endswith(".txt") and TXT_PATH:
    raise Exception("Output text dab file should have .txt extention, but the filename is\n %s"%TXT_PATH)

lists = parse_master_yaml(MASTER_PATH)
  
masks_dataset = MasksDataset(lists["images_lists"], lists["masks_lists"])
dabs_values = calculate_dab_values(masks_dataset)


if not os.path.exists(os.path.dirname(BIN_PATH)):
    os.makedirs(os.path.dirname(BIN_PATH), exist_ok=True)

if not os.path.exists(os.path.dirname(BIN_PATH)):
    os.makedirs(os.path.dirname(BIN_PATH), exist_ok=True)

if BIN_PATH:
    np.save(BIN_PATH, dabs_values)
if TXT_PATH:
    np.savetxt(TXT_PATH, dabs_values)